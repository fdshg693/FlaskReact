# ======================================================================
# AI Code Review Workflow
# ======================================================================
# This workflow uses OpenAI's GPT-4o-mini to automatically review code changes
# and provide feedback in Japanese. It can be triggered manually via workflow_dispatch.
#
# Prerequisites:
# - OPENAI_API_KEY secret must be configured in the repository settings
# - The workflow requires jq for JSON processing (pre-installed on Ubuntu runners)
#
# Output:
# - AI review comments are available in the job output as 'review' variable
# ======================================================================

name: AI Code Review

# Trigger: Manual execution only (can be extended to pull_request events)
on: 
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Base branch to compare against (default: main)'
        required: false
        default: 'main'
        type: string

jobs:
  ai_review:
    name: Generate AI Code Review
    runs-on: ubuntu-latest
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 10
    
    steps:
      # ======================================================================
      # Step 1: Repository Setup
      # ======================================================================
      - name: Checkout repository with full history
        uses: actions/checkout@v4  # Updated to v4 for better performance
        with:
          # fetch-depth: 0 ensures we get the complete git history
          # This is necessary for generating diffs against base branches
          fetch-depth: 0
          
      # ======================================================================
      # Step 2: Generate Code Diff
      # ======================================================================
      - name: Generate diff against base branch
        id: generate_diff
        run: |
          # Determine the base branch for comparison
          # Priority: workflow input > PR base > default 'main'
          if [ -n "${{ github.event.pull_request.base.ref }}" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            BASE_BRANCH="${{ inputs.target_branch || 'main' }}"
          fi
          
          echo "Comparing against base branch: $BASE_BRANCH"
          
          # Fetch the latest version of the base branch
          git fetch origin "$BASE_BRANCH" || {
            echo "Error: Failed to fetch base branch '$BASE_BRANCH'"
            echo "Available branches:"
            git branch -r
            exit 1
          }
          
          # Generate unified diff with context
          # --unified=3 provides 3 lines of context (more readable than 0)
          # --no-color ensures clean output for AI processing
          git diff "origin/$BASE_BRANCH...HEAD" \
            --unified=3 \
            --no-color \
            --ignore-space-change \
            > diff.patch
          
          # Check if there are any changes
          if [ ! -s diff.patch ]; then
            echo "No changes detected between current branch and $BASE_BRANCH"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          echo "Generated diff file ($(wc -l < diff.patch) lines)"

      # ======================================================================
      # Step 3: AI Code Review via OpenAI API
      # ======================================================================
      - name: Request AI code review
        id: ai_review
        # Skip this step if no changes were detected
        if: steps.generate_diff.outputs.has_changes == 'true'
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Validate API key exists
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Error: OPENAI_API_KEY secret is not configured"
            exit 1
          fi
          
          # Read the diff file and escape it properly for JSON
          DIFF_CONTENT=$(cat diff.patch)
          
          # Create a comprehensive prompt for the AI reviewer
          # The prompt is in Japanese as requested in the original code
          PROMPT=$(cat << 'EOF'
„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç®„É≥„Ç∏„Éã„Ç¢„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆ„Ç≥„Éº„ÉâÂ∑ÆÂàÜ„ÇíË©≥Á¥∞„Å´„É¨„Éì„É•„Éº„Åó„ÄÅÊó•Êú¨Ë™û„Åß‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„Åã„ÇâÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

## „É¨„Éì„É•„ÉºË¶≥ÁÇπ
1. **„Ç≥„Éº„Éâ„ÅÆÂìÅË≥™**: ÂèØË™≠ÊÄß„ÄÅ‰øùÂÆàÊÄß„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
2. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£**: ÊΩúÂú®ÁöÑ„Å™ËÑÜÂº±ÊÄß„ÇÑ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É™„Çπ„ÇØ
3. **„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ**: Ë®ÄË™û„ÇÑ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆÊé®Â•®‰∫ãÈ†Ö
4. **„Éê„Ç∞„ÅÆÂèØËÉΩÊÄß**: „É≠„Ç∏„ÉÉ„ÇØ„Ç®„É©„Éº„ÇÑ‰æãÂ§ñÂá¶ÁêÜ„ÅÆÂïèÈ°å
5. **ÊîπÂñÑÊèêÊ°à**: ÂÖ∑‰ΩìÁöÑ„Å™ÊîπÂñÑÊ°à„ÇÑ„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÊèêÊ°à

## Âá∫ÂäõÂΩ¢Âºè
- ÂïèÈ°åÁÇπ„ÅØÂÖ∑‰ΩìÁöÑ„Å´ÊåáÊëò„Åó„ÄÅË©≤ÂΩìË°åÁï™Âè∑„ÇÇÂê´„ÇÅ„Çã
- ÊîπÂñÑÊ°à„ÅØÂÆüË£ÖÂèØËÉΩ„Å™ÂÖ∑‰Ωì‰æã„ÇíÊèê‰æõ„Åô„Çã
- ÈáçË¶ÅÂ∫¶ÔºàÈ´ò„Éª‰∏≠„Éª‰ΩéÔºâ„ÇíÊòéË®ò„Åô„Çã

## „Ç≥„Éº„ÉâÂ∑ÆÂàÜ:
```diff
EOF
          )
          
          # Append the actual diff content
          PROMPT="${PROMPT}
${DIFF_CONTENT}
\`\`\`"
          
          # Construct JSON payload for OpenAI API
          # Using jq for safe JSON construction to prevent injection
          PAYLOAD=$(jq -n \
            --arg model "gpt-4o-mini" \
            --arg prompt "$PROMPT" \
            --argjson max_tokens 1500 \
            --argjson temperature 0.3 \
            '{
              model: $model,
              messages: [
                {
                  role: "system",
                  content: "„ÅÇ„Å™„Åü„ÅØË¶™Âàá„ÅßÂª∫Ë®≠ÁöÑ„Å™„Ç≥„Éº„Éâ„É¨„Éì„É•„Éº„Ç¢„Éº„Åß„Åô„ÄÇË©≥Á¥∞„ÅßÂÆüÁî®ÁöÑ„Å™„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                },
                {
                  role: "user", 
                  content: $prompt
                }
              ],
              max_tokens: $max_tokens,
              temperature: $temperature
            }'
          )
          
          echo "Sending request to OpenAI API..."
          
          # Make API call to OpenAI with error handling
          HTTP_CODE=$(curl -w "%{http_code}" -s \
            -X POST \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -o api_response.json \
            https://api.openai.com/v1/chat/completions
          )
          
          # Check HTTP response code
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error: OpenAI API request failed with HTTP $HTTP_CODE"
            echo "Response:"
            cat api_response.json
            exit 1
          fi
          
          # Extract the review content from the API response
          REVIEW_CONTENT=$(jq -r '.choices[0].message.content // "No review content received"' api_response.json)
          
          # Check if the API returned an error
          if [ "$REVIEW_CONTENT" = "null" ] || [ "$REVIEW_CONTENT" = "No review content received" ]; then
            echo "Error: No valid review content received from OpenAI"
            echo "API Response:"
            cat api_response.json
            exit 1
          fi
          
          # Write review to GitHub Actions output using multiline format
          # This method is the recommended way to handle multiline output
          {
            echo "review<<REVIEW_EOF"
            echo "$REVIEW_CONTENT"
            echo "REVIEW_EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ AI code review completed successfully"
          
          # Optional: Save review to artifact for later reference
          echo "$REVIEW_CONTENT" > ai_review_output.txt

      # ======================================================================
      # Step 4: Display Results
      # ======================================================================
      - name: Display review results
        if: steps.generate_diff.outputs.has_changes == 'true'
        run: |
          echo "## ü§ñ AI Code Review Results"
          echo ""
          echo "${{ steps.ai_review.outputs.review }}"
          
      - name: No changes detected
        if: steps.generate_diff.outputs.has_changes == 'false'
        run: |
          echo "## ‚ÑπÔ∏è No Changes Detected"
          echo "No code changes found between the current branch and the base branch."
          
      # ======================================================================
      # Step 5: Upload Review as Artifact (Optional)
      # ======================================================================
      - name: Upload AI review as artifact
        if: steps.generate_diff.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-review-${{ github.run_number }}
          path: |
            ai_review_output.txt
            diff.patch
          retention-days: 30
