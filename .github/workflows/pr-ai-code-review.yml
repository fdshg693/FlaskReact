# ======================================================================
# AI Code Review Workflow
# ======================================================================
# This workflow uses OpenAI's GPT-4o-mini to automatically review code changes
# and provide feedback in Japanese. It can be triggered manually via workflow_dispatch.
#
# Prerequisites:
# - OPENAI_API_KEY secret must be configured in the repository settings
# - The workflow requires jq for JSON processing (pre-installed on Ubuntu runners)
#
# Output:
# - AI review comments are available in the job output as 'review' variable
# ======================================================================

name: AI Code Review Pull Request Workflow

# Trigger: Manual execution only (can be extended to pull_request events)
on: 
  push:
    branches:
      - main
  pull_request:      # ここを追加
    types: [opened, synchronize, reopened]

jobs:
  ai_review:
    name: Generate AI Code Review
    runs-on: ubuntu-latest
    
    # Add necessary permissions for PR commenting
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    # Configuration constants
    env:
      AI_MODEL: "gpt-4.1-turbo-1106"  # Updated to latest model for better performance
      MAX_TOKENS: 1500
      TEMPERATURE: 0.3
      FETCH_DEPTH: 50  # Optimized for performance - gets recent commits only
      TIMEOUT_MINUTES: 10
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 10
    
    steps:
      # ======================================================================
      # Step 1: Repository Setup
      # ======================================================================
      - name: Checkout repository with optimized history
        uses: actions/checkout@v4  # Updated to v4 for better performance
        with:
          # fetch-depth: optimized for performance while ensuring diff generation
          # Gets recent commits instead of full history for better performance
          fetch-depth: ${{ env.FETCH_DEPTH }}
          
      # ======================================================================
      # Step 2: Generate Code Diff
      # ======================================================================
      - name: Generate diff against base branch
        id: generate_diff
        run: |
          # Determine the base branch for comparison
          # Priority: workflow input > PR base > default 'main'
          if [ -n "${{ github.event.pull_request.base.ref }}" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            BASE_BRANCH="${{ inputs.target_branch || 'main' }}"
          fi
          
          echo "Comparing against base branch: $BASE_BRANCH"
          
          # Fetch the latest version of the base branch
          git fetch origin "$BASE_BRANCH" || {
            echo "Error: Failed to fetch base branch '$BASE_BRANCH'"
            echo "Available branches:"
            git branch -r
            exit 1
          }
          
          # Generate unified diff with context
          # --unified=3 provides 3 lines of context (more readable than 0)
          # --no-color ensures clean output for AI processing
          git diff "origin/$BASE_BRANCH...HEAD" \
            --unified=3 \
            --no-color \
            --ignore-space-change \
            > diff.patch
          
          # Check if there are any changes with detailed logging
          if [ ! -s diff.patch ]; then
            echo "ℹ️ No changes detected between current branch and $BASE_BRANCH"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "DEBUG: has_changes set to false" # Debug output for troubleshooting
            exit 0
          fi
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          echo "DEBUG: has_changes set to true" # Debug output for troubleshooting
          echo "✅ Generated diff file ($(wc -l < diff.patch) lines)"

      # ======================================================================
      # Step 3: AI Code Review via OpenAI API
      # ======================================================================
      - name: Request AI code review
        id: ai_review
        # Skip this step if no changes were detected
        if: steps.generate_diff.outputs.has_changes == 'true'
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # ====================================================================
          # Security: Validate API key exists without exposing it
          # ====================================================================
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "❌ Error: OPENAI_API_KEY secret is not configured in repository settings"
            echo "Please add the OPENAI_API_KEY secret to your repository."
            exit 1
          fi
          
          echo "✅ API key validation successful"
          
          # ====================================================================
          # Diff Processing: Read and prepare content for AI analysis
          # ====================================================================
          DIFF_CONTENT=$(cat diff.patch)
          
          # ====================================================================
          # Prompt Engineering: Comprehensive Japanese review prompt
          # ====================================================================
          PROMPT=$(cat << 'EOF'
            You are an experienced software engineer. Please review the following code diff in detail and analyze it in English from the following perspectives:

            ## Review Points
            1. **Code Quality**: Readability, maintainability, performance
            2. **Security**: Potential vulnerabilities and security risks
            3. **Best Practices**: Recommendations for the language or framework
            4. **Potential Bugs**: Logic errors or exception handling issues
            5. **Suggestions for Improvement**: Concrete improvement or refactoring proposals

            ## Output Format
            - Clearly point out issues with specific line numbers
            - Provide actionable examples for improvements
            - Indicate the importance (High / Medium / Low)

            ## Code Diff:
          ---BEGIN_DIFF---
          EOF
          )
          
          # Append the actual diff content and closing markers
          PROMPT="${PROMPT}
          ${DIFF_CONTENT}
          ---END_OF_DIFF---"
          
          # ====================================================================
          # API Configuration: Use environment variables for maintainability
          # ====================================================================
          PAYLOAD=$(jq -n \
            --arg model "$AI_MODEL" \
            --arg prompt "$PROMPT" \
            --argjson max_tokens "$MAX_TOKENS" \
            --argjson temperature "$TEMPERATURE" \
            '{
              model: $model,
              messages: [
                {
                  role: "system",
                  content: "You are a helpful and constructive code reviewer. Please provide detailed and actionable feedback."
                },
                {
                  role: "user", 
                  content: $prompt
                }
              ],
              max_tokens: $max_tokens,
              temperature: $temperature
            }'
          )
          
          echo "🔄 Sending request to OpenAI API..."
          
          # ====================================================================
          # Secure API Call: Improved error handling to prevent info leakage
          # ====================================================================
          HTTP_CODE=$(curl -w "%{http_code}" -s \
            -X POST \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -o api_response.json \
            https://api.openai.com/v1/chat/completions
          )
          
          # Check HTTP response code with improved error messaging
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "❌ Error: OpenAI API request failed with HTTP $HTTP_CODE"
            
            # Extract error details safely without exposing sensitive info
            ERROR_TYPE=$(jq -r '.error.type // "unknown"' api_response.json 2>/dev/null || echo "unknown")
            ERROR_MESSAGE=$(jq -r '.error.message // "API call failed"' api_response.json 2>/dev/null || echo "API call failed")
            
            echo "Error type: $ERROR_TYPE"
            echo "Error message: $ERROR_MESSAGE"
            echo "Please check your API key and try again."
            exit 1
          fi
          
          # ====================================================================
          # Response Processing: Enhanced validation and error handling
          # ====================================================================
          REVIEW_CONTENT=$(jq -r '.choices[0].message.content // "No review content received"' api_response.json 2>/dev/null)
          
          # Check if the API returned valid content
          if [ "$REVIEW_CONTENT" = "null" ] || [ "$REVIEW_CONTENT" = "No review content received" ] || [ -z "$REVIEW_CONTENT" ]; then
            echo "❌ Error: No valid review content received from OpenAI"
            
            # Check for API-level errors without exposing full response
            API_ERROR=$(jq -r '.error.message // "Unknown API error"' api_response.json 2>/dev/null || echo "Response parsing failed")
            echo "API indicated: $API_ERROR"
            exit 1
          fi
          
          # Write review to GitHub Actions output using multiline format
          # This method is the recommended way to handle multiline output
          {
            echo "review<<REVIEW_EOF"
            echo "$REVIEW_CONTENT"
            echo "REVIEW_EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "✅ AI code review completed successfully"          

      # ======================================================================
      # Step 4: PR Commenting
      # ======================================================================
      - name: PRにコメントを投稿
        if: steps.generate_diff.outputs.has_changes == 'true' && github.event.pull_request
        uses: actions/github-script@v7
        env:
          REVIEW_CONTENT: ${{ steps.ai_review.outputs.review }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewContent = process.env.REVIEW_CONTENT;
            if (reviewContent && reviewContent.trim() !== '') {
              console.log("Posting AI review comment to PR...");
              const prNumber = context.payload.pull_request.number;
              
              try {
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🤖 AI Code Review Results\n\n${reviewContent}`
                });
                console.log(`✅ Successfully posted review comment to PR #${prNumber}`);
              } catch (error) {
                console.error(`❌ Failed to post comment: ${error.message}`);
                // Log additional details for debugging
                console.error(`Error details: ${JSON.stringify({
                  status: error.status,
                  name: error.name,
                  documentation_url: error.documentation_url
                })}`);
                throw error;
              }
            } else {
              console.log("❌ No review content available to post.");
            }
          
