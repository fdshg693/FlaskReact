name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest
    env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          # Install a specific version of uv.
          version: "0.5.4"
          # Enable checksum verification for uv.
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Install Python dependencies
        run: uv sync

      - name: Verify installation
        run: |
          uv --version
          uv run python --version
          uv run python -c "import flask; print(f'Flask {flask.__version__} installed')"
          uv run python -c "import pandas; print(f'Pandas {pandas.__version__} installed')"
          uv run python -c "import sklearn; print(f'Scikit-learn {sklearn.__version__} installed')"

      - name: Run basic project validation
        run: |
          # Validate the project structure
          ls -la
          ls -la data/
          ls -la llm/
          ls -la machineLearning/
          ls -la static/
          ls -la server/
          
          # Check if the main entry point exists
          test -f run_app.py && echo "✓ run_app.py exists"
          test -f server/app.py && echo "✓ server/app.py exists"
          test -f pyproject.toml && echo "✓ pyproject.toml exists"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-
