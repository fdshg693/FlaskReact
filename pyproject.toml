[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flask-react-ml"
version = "0.1.0"
description = "A Flask/React web application for image analysis and machine learning operations"
readme = "README.md"
authors = [
    {name = "FlaskReact Team", email = "example@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Flask",
]
dependencies = [
    "Flask>=3.1.0",
    "flask-cors>=5.0.1",
    "numpy>=2.2.5",
    "pandas>=2.2.3",
    "scikit-learn>=1.6.1",
    "torch>=2.7.0",
    "torchvision>=0.22.0",
    "torchaudio>=2.7.0",
    "pillow>=11.2.1",
    "langchain>=0.3.25",
    "langchain-openai>=0.3.18",
    "openai>=1.82.0",
    "beautifulsoup4>=4.13.4",
    "pypdf>=5.5.0",
    "matplotlib>=3.10.3",
    "python-dotenv>=1.1.0",
    "requests>=2.32.3",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
]

[project.urls]
"Homepage" = "https://github.com/example/flask-react-ml"
"Bug Reports" = "https://github.com/example/flask-react-ml/issues"
"Source" = "https://github.com/example/flask-react-ml"

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | static
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "PIL.*",
    "langchain.*",
    "openai.*",
    "bs4.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/static/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
